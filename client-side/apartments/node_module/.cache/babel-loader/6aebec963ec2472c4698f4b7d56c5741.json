{"ast":null,"code":"var _jsxFileName = \"F:\\\\client-side\\\\apartments\\\\src\\\\components\\\\Products_List.jsx\",\n    _s = $RefreshSig$();\n\n// import React, { Component, useEffect } from 'react';\n// import { useState } from 'react';\n// import { useNavigate, useParams } from 'react-router-dom';\n// import { Routes, Route, Link, Outlet } from 'react-router-dom';\n// // import Client_Product_List from \"./Client_Product_List\";\n// import Client_Current_Product from \"./Client_Current_Product\";\n// import Client_Shoping_Cart from \"./Client_Shoping_Cart\";\n// import Client_Nav from \"./Client_Nav\";\n// export default function Products_List(props) {\n//     const [products, setProducts] = useState([]);\n//     const [client, setClient] = useState(\"\");\n//     const [category, setCategory] = useState(\"\");\n//     const [mystyle, setMystyle] = useState({});\n//     let navigate = useNavigate();\n//     useEffect(() => {\n//         async function getProducts() {\n//             let prod = await fetch(\"http://localhost:3678/products\", {\n//                 method: 'GET'\n//             });\n//             let pro = await prod.json();\n//             setProducts(pro);\n//             // let mclient = await fetch(\"http://localhost:3678/client\", {\n//             //     method: 'GET'\n//             // });\n//             // let cli = await mclient.json();\n//             // setClient(pro);\n//             //get products from db and save in usestate\n//         }\n//         getProducts();\n//         setMystyle({\n//             color: \"#3aedff\",\n//             fontSize: \"20px\", marginLeft: \"330px\",\n//             marginTop: \"70PX\"\n//         });\n//         // return async () => {\n//         //     let up = await fetch('http://localhost:3678/cart/delete/allitem', {\n//         //         method: 'DELETE',\n//         //         headers: {\n//         //             'Accept': 'application/json',\n//         //             'Content-Type': 'application/json'\n//         //         },\n//         //         body: JSON.stringify({\n//         //             orderid: JSON.parse(sessionStorage.getItem(\"currentuser\")).OrderID\n//         //         })\n//         //     });\n//         //     let response = up.json();\n//             // if (JSON.parse(sessionStorage.getItem(\"currentuser\")).user_name != null) {\n//             //     let up = await fetch('http://localhost:3678/cart/cartUpdate', {\n//             //         method: 'PUT',\n//             //         headers: {\n//             //             'Accept': 'application/json',\n//             //             'Content-Type': 'application/json'\n//             //         },\n//             //         body: JSON.stringify({\n//             //             user_name: JSON.parse(sessionStorage.getItem(\"currentuser\")).user_name,\n//             //             password: JSON.parse(sessionStorage.getItem(\"currentuser\")).password,\n//             //             cart: JSON.parse(sessionStorage.getItem(\"currentuser\")).cart\n//             //         })\n//             //     });\n//             //     alert('updated details and exit');\n//             // }\n//             // let prod = await fetch(\"http://localhost:3678/cart/shopingCart\", {\n//             //     method: 'POST',\n//             //     headers: {\n//             //         'Accept': 'application/json',\n//             //         'Content-Type': 'application/json'\n//             //     },\n//             //     body: JSON.stringify({ password: JSON.parse(sessionStorage.getItem(\"currentuser\")).password })\n//             // });\n//             // let prodb = await prod.json();\n//             // let prosession = JSON.parse(sessionStorage.getItem(\"currentuser\")).cart;\n//             // let isbool = false;\n//             // let post = [];\n//             // let update = [];\n//             // for (let i = 0; i < prosession.length; i++) {\n//             //     isbool = false;\n//             //     for (let j = 0; j < prodb.length; j++) {\n//             //         // const element = array[index];\n//             //         if (prosession[i] === prodb[j]) {\n//             //             isbool = true;\n//             //         }\n//             //     }\n//             //     if (isbool) {\n//             //         update.push(prosession[i]);\n//             //     }else{\n//             //         post.push(prosession[i]);\n//             //     }\n//             //     // const element = prosession[index];\n//             // }\n//             // let up = await fetch('http://localhost:3678/cart/cartUpdate', {\n//             //         method: 'PUT',\n//             //         headers: {\n//             //             'Accept': 'application/json',\n//             //             'Content-Type': 'application/json'\n//             //         },\n//             //         body: JSON.stringify({\n//             //             update:update,\n//             //             OrderID:JSON.parse(sessionStorage.getItem('currentuser')).OrderID\n//             //         })\n//             //     });\n//             // console.log(\"post \"+JSON.stringify(post)+\"  hh\");\n//         //     let postt = await fetch('http://localhost:3678/cart/insert', {\n//         //         method: 'POST',\n//         //         headers: {\n//         //             'Accept': 'application/json',\n//         //             'Content-Type': 'application/json'\n//         //         },\n//         //         body: JSON.stringify({\n//         //             post: JSON.parse(sessionStorage.getItem('currentuser')).cart,\n//         //             OrderID: JSON.parse(sessionStorage.getItem('currentuser')).OrderID\n//         //         })\n//         //     });\n//         //     let res=postt.json();\n//         // }\n//     }, []);\n//     async function categoryType(val) {\n//         setCategory(val);\n//         console.log(`val ${val}`);\n//         let codeC = await fetch(`http://localhost:3678/products/category/${val}`, {\n//             method: 'GET'\n//         });\n//         let codeCateg = await codeC.json();\n//         let catItems = await fetch(`http://localhost:3678/products/codecategory/${codeCateg[0].CategoryCode}`, {\n//             method: 'GET'\n//         });\n//         let allCatItems = await catItems.json();\n//         console.log(allCatItems);\n//         setProducts(allCatItems);\n//     };\n//     async function forShoppingCart() {\n//         console.log(products);\n//         navigate(\"/client/shopingCart\", { state: { products: products } });\n//     }\n//     async function toTheItem(myproduct) {\n//         // navigate(\"/client/shopingCart\", { state: {products:products} });\n//         navigate(`/client/currentProduct/${myproduct.CodeItem}`, { state: { products: products, CodeItem: myproduct.CodeItem, myproduct: myproduct } });\n//     }\n//     return (<div>\n//         {/* <Client_Nav /> */}\n//         <div className=\"\">\n//             <nav id=\"navs \">\n//                 <Link className=\"App-link\" style={mystyle} to={`/login`}>log in</Link>\n//                 <Link className=\"App-link\" style={mystyle} to={`/signin`}>sign in</Link>\n//                 {/* <Link className=\"App-link\" style={mystyle} to={`/manager/orderingList`}>orderingList</Link> */}\n//                 {/* <Link className=\"App-link\" style={mystyle} to={`/manager/profits`}>profits</Link> */}\n//             </nav>\n//             <Outlet />\n//         </div>\n//         <p className='title'>all items</p>\n//         {/* <div>{products.map((product) => product.ItemName)}</div> */}\n//         <br></br>\n//         <label className='title2'>categories: </label>\n//         {/* <select onChange={(e)=>{setCategory(e.target.value)}}> */}\n//         <div className=\"allS\">\n//             <div className=\"select\">\n//         <select onChange={(e) => { categoryType(e.target.value) }}>\n//             <option>heels</option>\n//             <option>flat</option>\n//             <option>sneakers</option>\n//             <option>sandals</option>\n//             <option>boots</option>\n//             <option>slippers</option>\n//         </select><br></br>\n//         </div>\n//         </div>\n//         <br></br>\n//         {products.map((myproduct) =>\n//         (<div key={myproduct.CodeItem}>\n//             {/* {myproduct.ItemName} */}\n//             {/* <Link to={`/client/currentProduct/${myproduct.CodeItem}`}>{myproduct.ItemName}</Link> */}\n//             <button onClick={() => { toTheItem(myproduct) }}>{myproduct.ItemName}</button>\n//             {/* <button>add to shopping cart</button> */}\n//         </div>)\n//         )}\n//         {/* <button onClick={(e) => { buymyproduct(e.target.value) }}>ADD TO SHOPING CART</button> */}\n//         {/* <Client_Product_List products={products} /> */}\n//         {/* <Routes>\n//             <Route path=\"/currentProduct/:itemCode\" element={< Client_Current_Product items={products} />}></Route>\n//         </Routes>\n//         <Outlet></Outlet> */}\n//         {/* <button onClick={forShoppingCart}>to shopping cart</button> */}\n//     </div>);\n// }\nimport React, { Component, useEffect } from 'react';\nimport { useState } from 'react';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport { Routes, Route, Link, Outlet } from 'react-router-dom';\nimport Client_Current_Product from \"./Client_Current_Product\";\nimport Client_Shoping_Cart from \"./Client_Shoping_Cart\";\nimport Client_Nav from \"./Client_Nav\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Products_List(props) {\n  _s();\n\n  const [products, setProducts] = useState([]);\n  const [client, setClient] = useState(\"\");\n  const [categories, setCategories] = useState([]);\n  const [category, setCategory] = useState(\"\");\n  let navigate = useNavigate();\n  const [limit, setLimit] = useState(-2);\n  const [displayB, setDisplayB] = useState(\"block\");\n  const [displayP, setDisplayP] = useState(\"none\");\n  const [mystyle, setMystyle] = useState({});\n  let a = 0;\n  useEffect(() => {\n    a++;\n\n    async function getAllCategories() {\n      let cat = await fetch(`http://localhost:3678/products/allcategories`, {\n        method: 'GET'\n      });\n      let allCategories = await cat.json();\n      setCategories(allCategories);\n    }\n\n    setMystyle({\n      color: \"#3aedff\",\n      fontSize: \"20px\",\n      marginLeft: \"330px\",\n      marginTop: \"70PX\"\n    });\n    getAllCategories();\n    getProducts(a);\n  }, []);\n\n  async function getProducts(a) {\n    let newLimit = limit + 5;\n    setLimit(newLimit);\n    console.log(\"newLimit\" + newLimit);\n    let prod = await fetch(`http://localhost:3678/products/limit`, {\n      method: 'POST',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        limit: newLimit\n      })\n    });\n    let pro = await prod.json();\n    let arr = products;\n\n    if (a === 1) {\n      if (pro.length == 0) {\n        setDisplayB(\"none\");\n        setDisplayP(\"block\");\n      } else {\n        let i = 0;\n\n        while (i != pro.length) {\n          debugger;\n          arr.push(pro[i]);\n          i++;\n        }\n\n        setProducts([...arr]);\n      }\n    }\n  }\n\n  async function categoryType(val) {\n    setCategory(val);\n    console.log(`val ${val}`);\n    let catItems = await fetch(`http://localhost:3678/products/codecategory/${val}`, {\n      method: 'GET'\n    });\n    let allCatItems = await catItems.json();\n    console.log(allCatItems);\n    setProducts(allCatItems);\n  }\n\n  ;\n\n  async function toTheItem(myproduct) {\n    navigate(`/client/currentProduct/${myproduct.CodeItem}`, {\n      state: {\n        products: products,\n        CodeItem: myproduct.CodeItem,\n        myproduct: myproduct\n      }\n    });\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"\",\n      children: [/*#__PURE__*/_jsxDEV(\"nav\", {\n        id: \"navs \",\n        children: [/*#__PURE__*/_jsxDEV(Link, {\n          className: \"App-link\",\n          style: mystyle,\n          to: `/login`,\n          children: \"log in\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 296,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(Link, {\n          className: \"App-link\",\n          style: mystyle,\n          to: `/signin`,\n          children: \"sign in\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 297,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(Link, {\n          className: \"App-link\",\n          style: mystyle,\n          to: `/manager/profits`,\n          children: \"profits\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 298,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 295,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Outlet, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 300,\n        columnNumber: 12\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 294,\n      columnNumber: 10\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"title\",\n      children: \"all items\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 302,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 303,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      className: \"title2\",\n      children: \"categories: \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 304,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"allS\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"select\",\n        children: /*#__PURE__*/_jsxDEV(\"select\", {\n          onChange: e => {\n            categoryType(e.target.value);\n          },\n          children: categories.map((option, index) => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: index + 1,\n            children: option.CategoryName\n          }, option.CategoryCode, false, {\n            fileName: _jsxFileName,\n            lineNumber: 309,\n            columnNumber: 25\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 307,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 306,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 305,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 316,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 317,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid\",\n      children: products.map(myproduct => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"button\",\n          onClick: () => {\n            toTheItem(myproduct);\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"img\", {\n            className: \"img\",\n            src: `${myproduct.path}`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 322,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 322,\n            columnNumber: 74\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"itemName\",\n            children: [\" \", myproduct.ItemName]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 323,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 321,\n          columnNumber: 21\n        }, this)\n      }, myproduct.CodeItem, false, {\n        fileName: _jsxFileName,\n        lineNumber: 320,\n        columnNumber: 18\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 318,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"but2\",\n      style: {\n        display: displayB\n      },\n      onClick: () => {\n        getProducts(1);\n      },\n      children: \"Show more\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 329,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        display: displayP,\n        color: \"black\"\n      },\n      children: \"no more products\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 330,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 292,\n    columnNumber: 13\n  }, this);\n}\n\n_s(Products_List, \"q32xXLEF4JS25x6tk4WWpAKRx/c=\", false, function () {\n  return [useNavigate];\n});\n\n_c = Products_List;\n\nvar _c;\n\n$RefreshReg$(_c, \"Products_List\");","map":{"version":3,"names":["React","Component","useEffect","useState","useNavigate","useParams","Routes","Route","Link","Outlet","Client_Current_Product","Client_Shoping_Cart","Client_Nav","Products_List","props","products","setProducts","client","setClient","categories","setCategories","category","setCategory","navigate","limit","setLimit","displayB","setDisplayB","displayP","setDisplayP","mystyle","setMystyle","a","getAllCategories","cat","fetch","method","allCategories","json","color","fontSize","marginLeft","marginTop","getProducts","newLimit","console","log","prod","headers","body","JSON","stringify","pro","arr","length","i","push","categoryType","val","catItems","allCatItems","toTheItem","myproduct","CodeItem","state","e","target","value","map","option","index","CategoryName","CategoryCode","path","ItemName","display"],"sources":["F:/client-side/apartments/src/components/Products_List.jsx"],"sourcesContent":["\r\n// import React, { Component, useEffect } from 'react';\r\n// import { useState } from 'react';\r\n// import { useNavigate, useParams } from 'react-router-dom';\r\n// import { Routes, Route, Link, Outlet } from 'react-router-dom';\r\n// // import Client_Product_List from \"./Client_Product_List\";\r\n// import Client_Current_Product from \"./Client_Current_Product\";\r\n// import Client_Shoping_Cart from \"./Client_Shoping_Cart\";\r\n// import Client_Nav from \"./Client_Nav\";\r\n// export default function Products_List(props) {\r\n//     const [products, setProducts] = useState([]);\r\n//     const [client, setClient] = useState(\"\");\r\n//     const [category, setCategory] = useState(\"\");\r\n//     const [mystyle, setMystyle] = useState({});\r\n\r\n//     let navigate = useNavigate();\r\n\r\n//     useEffect(() => {\r\n//         async function getProducts() {\r\n//             let prod = await fetch(\"http://localhost:3678/products\", {\r\n//                 method: 'GET'\r\n//             });\r\n//             let pro = await prod.json();\r\n//             setProducts(pro);\r\n\r\n//             // let mclient = await fetch(\"http://localhost:3678/client\", {\r\n//             //     method: 'GET'\r\n//             // });\r\n//             // let cli = await mclient.json();\r\n//             // setClient(pro);\r\n//             //get products from db and save in usestate\r\n//         }\r\n//         getProducts();\r\n//         setMystyle({\r\n//             color: \"#3aedff\",\r\n//             fontSize: \"20px\", marginLeft: \"330px\",\r\n//             marginTop: \"70PX\"\r\n//         });\r\n//         // return async () => {\r\n\r\n//         //     let up = await fetch('http://localhost:3678/cart/delete/allitem', {\r\n//         //         method: 'DELETE',\r\n//         //         headers: {\r\n//         //             'Accept': 'application/json',\r\n//         //             'Content-Type': 'application/json'\r\n//         //         },\r\n//         //         body: JSON.stringify({\r\n//         //             orderid: JSON.parse(sessionStorage.getItem(\"currentuser\")).OrderID\r\n//         //         })\r\n//         //     });\r\n//         //     let response = up.json();\r\n\r\n//             // if (JSON.parse(sessionStorage.getItem(\"currentuser\")).user_name != null) {\r\n//             //     let up = await fetch('http://localhost:3678/cart/cartUpdate', {\r\n//             //         method: 'PUT',\r\n//             //         headers: {\r\n//             //             'Accept': 'application/json',\r\n//             //             'Content-Type': 'application/json'\r\n//             //         },\r\n//             //         body: JSON.stringify({\r\n//             //             user_name: JSON.parse(sessionStorage.getItem(\"currentuser\")).user_name,\r\n//             //             password: JSON.parse(sessionStorage.getItem(\"currentuser\")).password,\r\n//             //             cart: JSON.parse(sessionStorage.getItem(\"currentuser\")).cart\r\n//             //         })\r\n//             //     });\r\n//             //     alert('updated details and exit');\r\n//             // }\r\n//             // let prod = await fetch(\"http://localhost:3678/cart/shopingCart\", {\r\n//             //     method: 'POST',\r\n//             //     headers: {\r\n//             //         'Accept': 'application/json',\r\n//             //         'Content-Type': 'application/json'\r\n//             //     },\r\n//             //     body: JSON.stringify({ password: JSON.parse(sessionStorage.getItem(\"currentuser\")).password })\r\n//             // });\r\n//             // let prodb = await prod.json();\r\n//             // let prosession = JSON.parse(sessionStorage.getItem(\"currentuser\")).cart;\r\n//             // let isbool = false;\r\n//             // let post = [];\r\n//             // let update = [];\r\n//             // for (let i = 0; i < prosession.length; i++) {\r\n//             //     isbool = false;\r\n//             //     for (let j = 0; j < prodb.length; j++) {\r\n//             //         // const element = array[index];\r\n//             //         if (prosession[i] === prodb[j]) {\r\n//             //             isbool = true;\r\n//             //         }\r\n\r\n//             //     }\r\n//             //     if (isbool) {\r\n//             //         update.push(prosession[i]);\r\n//             //     }else{\r\n//             //         post.push(prosession[i]);\r\n//             //     }\r\n//             //     // const element = prosession[index];\r\n//             // }\r\n//             // let up = await fetch('http://localhost:3678/cart/cartUpdate', {\r\n//             //         method: 'PUT',\r\n//             //         headers: {\r\n//             //             'Accept': 'application/json',\r\n//             //             'Content-Type': 'application/json'\r\n//             //         },\r\n//             //         body: JSON.stringify({\r\n//             //             update:update,\r\n//             //             OrderID:JSON.parse(sessionStorage.getItem('currentuser')).OrderID\r\n//             //         })\r\n//             //     });\r\n//             // console.log(\"post \"+JSON.stringify(post)+\"  hh\");\r\n//         //     let postt = await fetch('http://localhost:3678/cart/insert', {\r\n//         //         method: 'POST',\r\n//         //         headers: {\r\n//         //             'Accept': 'application/json',\r\n//         //             'Content-Type': 'application/json'\r\n//         //         },\r\n//         //         body: JSON.stringify({\r\n//         //             post: JSON.parse(sessionStorage.getItem('currentuser')).cart,\r\n//         //             OrderID: JSON.parse(sessionStorage.getItem('currentuser')).OrderID\r\n//         //         })\r\n//         //     });\r\n//         //     let res=postt.json();\r\n//         // }\r\n//     }, []);\r\n\r\n//     async function categoryType(val) {\r\n//         setCategory(val);\r\n//         console.log(`val ${val}`);\r\n//         let codeC = await fetch(`http://localhost:3678/products/category/${val}`, {\r\n//             method: 'GET'\r\n//         });\r\n//         let codeCateg = await codeC.json();\r\n\r\n//         let catItems = await fetch(`http://localhost:3678/products/codecategory/${codeCateg[0].CategoryCode}`, {\r\n//             method: 'GET'\r\n//         });\r\n//         let allCatItems = await catItems.json();\r\n//         console.log(allCatItems);\r\n//         setProducts(allCatItems);\r\n//     };\r\n//     async function forShoppingCart() {\r\n//         console.log(products);\r\n//         navigate(\"/client/shopingCart\", { state: { products: products } });\r\n//     }\r\n\r\n//     async function toTheItem(myproduct) {\r\n//         // navigate(\"/client/shopingCart\", { state: {products:products} });\r\n//         navigate(`/client/currentProduct/${myproduct.CodeItem}`, { state: { products: products, CodeItem: myproduct.CodeItem, myproduct: myproduct } });\r\n    \r\n//     }\r\n\r\n\r\n//     return (<div>\r\n//         {/* <Client_Nav /> */}\r\n//         <div className=\"\">\r\n//             <nav id=\"navs \">\r\n//                 <Link className=\"App-link\" style={mystyle} to={`/login`}>log in</Link>\r\n//                 <Link className=\"App-link\" style={mystyle} to={`/signin`}>sign in</Link>\r\n//                 {/* <Link className=\"App-link\" style={mystyle} to={`/manager/orderingList`}>orderingList</Link> */}\r\n//                 {/* <Link className=\"App-link\" style={mystyle} to={`/manager/profits`}>profits</Link> */}\r\n//             </nav>\r\n//             <Outlet />\r\n//         </div>\r\n//         <p className='title'>all items</p>\r\n//         {/* <div>{products.map((product) => product.ItemName)}</div> */}\r\n//         <br></br>\r\n//         <label className='title2'>categories: </label>\r\n//         {/* <select onChange={(e)=>{setCategory(e.target.value)}}> */}\r\n//         <div className=\"allS\">\r\n//             <div className=\"select\">\r\n//         <select onChange={(e) => { categoryType(e.target.value) }}>\r\n//             <option>heels</option>\r\n//             <option>flat</option>\r\n//             <option>sneakers</option>\r\n//             <option>sandals</option>\r\n//             <option>boots</option>\r\n//             <option>slippers</option>\r\n//         </select><br></br>\r\n//         </div>\r\n//         </div>\r\n\r\n\r\n\r\n//         <br></br>\r\n//         {products.map((myproduct) =>\r\n//         (<div key={myproduct.CodeItem}>\r\n//             {/* {myproduct.ItemName} */}\r\n//             {/* <Link to={`/client/currentProduct/${myproduct.CodeItem}`}>{myproduct.ItemName}</Link> */}\r\n//             <button onClick={() => { toTheItem(myproduct) }}>{myproduct.ItemName}</button>\r\n//             {/* <button>add to shopping cart</button> */}\r\n//         </div>)\r\n//         )}\r\n//         {/* <button onClick={(e) => { buymyproduct(e.target.value) }}>ADD TO SHOPING CART</button> */}\r\n\r\n//         {/* <Client_Product_List products={products} /> */}\r\n//         {/* <Routes>\r\n//             <Route path=\"/currentProduct/:itemCode\" element={< Client_Current_Product items={products} />}></Route>\r\n//         </Routes>\r\n//         <Outlet></Outlet> */}\r\n//         {/* <button onClick={forShoppingCart}>to shopping cart</button> */}\r\n//     </div>);\r\n// }\r\n\r\nimport React, { Component, useEffect } from 'react';\r\nimport { useState } from 'react';\r\nimport { useNavigate, useParams } from 'react-router-dom';\r\nimport { Routes, Route, Link, Outlet } from 'react-router-dom';\r\nimport Client_Current_Product from \"./Client_Current_Product\";\r\nimport Client_Shoping_Cart from \"./Client_Shoping_Cart\";\r\nimport Client_Nav from \"./Client_Nav\";\r\nexport default function Products_List(props) {\r\n    const [products, setProducts] = useState([]);\r\n    const [client, setClient] = useState(\"\");\r\n    const [categories,setCategories]=useState([]);\r\n    const [category, setCategory] = useState(\"\");\r\n    let navigate = useNavigate();\r\n    const [limit, setLimit] = useState(-2);\r\n    const [displayB, setDisplayB] = useState(\"block\");\r\n    const [displayP, setDisplayP] = useState(\"none\");\r\n    const [mystyle, setMystyle] = useState({});\r\n\r\n    let a = 0\r\n    useEffect(() => {\r\n        a++;\r\n            async function getAllCategories() {\r\n                let cat = await fetch(`http://localhost:3678/products/allcategories`, {\r\n                    method: 'GET'\r\n                });\r\n                let allCategories = await cat.json();\r\n                setCategories(allCategories);\r\n            }\r\n            setMystyle({\r\n                color: \"#3aedff\",\r\n                fontSize: \"20px\", marginLeft: \"330px\",\r\n                marginTop: \"70PX\"\r\n            });\r\n            getAllCategories();\r\n             getProducts(a);\r\n      \r\n    }, []);\r\n\r\n    async function getProducts(a) {\r\n        let newLimit = limit + 5;\r\n        setLimit(newLimit)\r\n        console.log(\"newLimit\" + newLimit);\r\n        let prod = await fetch(`http://localhost:3678/products/limit`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({ limit: newLimit })\r\n        });\r\n        let pro = await prod.json();\r\n        let arr = products;\r\n        if (a === 1) {\r\n            if (pro.length == 0) {\r\n                setDisplayB(\"none\")\r\n                setDisplayP(\"block\")\r\n            }\r\n            else {\r\n\r\n                let i = 0;\r\n                while (i != pro.length) {\r\n                    debugger;\r\n                    arr.push(pro[i]);\r\n                    i++;\r\n                }\r\n\r\n                setProducts([...arr]);\r\n            }\r\n        }\r\n    }\r\n\r\n    async function categoryType(val) {\r\n        setCategory(val);\r\n        console.log(`val ${val}`);\r\n       \r\n\r\n        let catItems = await fetch(`http://localhost:3678/products/codecategory/${val}`, {\r\n            method: 'GET'\r\n        });\r\n        let allCatItems = await catItems.json();\r\n        console.log(allCatItems);\r\n        setProducts(allCatItems);\r\n    };\r\n   \r\n   \r\n    async function toTheItem(myproduct) {\r\n        navigate(`/client/currentProduct/${myproduct.CodeItem}`, { state: { products: products, CodeItem: myproduct.CodeItem, myproduct: myproduct } });\r\n    }\r\n\r\n\r\n    return (<div>\r\n        \r\n         <div className=\"\">\r\n            <nav id=\"navs \">\r\n                <Link className=\"App-link\" style={mystyle} to={`/login`}>log in</Link>\r\n                <Link className=\"App-link\" style={mystyle} to={`/signin`}>sign in</Link>\r\n          <Link className=\"App-link\" style={mystyle} to={`/manager/profits`}>profits</Link>\r\n             </nav>\r\n           <Outlet />\r\n        </div> \r\n        <p className='title'>all items</p>\r\n        <br></br>\r\n        <label className='title2'>categories: </label>\r\n        <div className=\"allS\">\r\n            <div className=\"select\">\r\n                <select onChange={(e) => { categoryType(e.target.value) }}>\r\n                    {categories.map((option, index) => (\r\n                        <option key={option.CategoryCode} value={index + 1} >\r\n                            {option.CategoryName}\r\n                        </option>\r\n                    ))}\r\n                </select>\r\n            </div>\r\n        </div>\r\n        <br></br>\r\n        <br></br>\r\n        <div className='grid'>\r\n            {products.map((myproduct) =>\r\n                (<div key={myproduct.CodeItem}>\r\n                    <button className='button' onClick={() => { toTheItem(myproduct) }}>\r\n                        <img className='img' src={`${myproduct.path}`} /><br />\r\n                        <p className='itemName'> {myproduct.ItemName}</p>\r\n                    </button>\r\n\r\n                </div>)\r\n            )}\r\n        </div>\r\n        <button className=\"but2\" style={{ display: displayB }} onClick={() => { getProducts(1) }}>Show more</button>\r\n        <p style={{ display: displayP, color: \"black\" }}>no more products</p>\r\n\r\n        {/* <button className=\"toS\" onClick={forShoppingCart}>to shopping cart</button> */}\r\n    </div>);\r\n\r\n}\r\n"],"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"},"metadata":{},"sourceType":"module"}