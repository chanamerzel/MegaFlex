{"ast":null,"code":"var _jsxFileName = \"F:\\\\client-side\\\\apartments\\\\src\\\\components\\\\Client_Product_In_Cart.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { useParams } from 'react-router-dom';\nimport { useNavigate } from 'react-router-dom';\nimport { useLocation } from 'react-router-dom';\nimport { Routes, Route, Link, Outlet } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Client_Product_In_Cart(props) {\n  _s();\n\n  const [cart, setCart] = useState([]);\n  const [outOfStock, setOutOfStock] = useState(false);\n  const [belowStock, setBelowStock] = useState(false);\n  let itemname = props.product.Quantity;\n  let itemCode;\n  let AllItems;\n  let item;\n  let itemQ;\n  useEffect(() => {\n    // sessionStorage.setItem(\"currentuser\",JSON.stringify({password:111,user_name:\"chani\",cart:{}}));\n    debugger;\n\n    async function getCart() {\n      let prod = await fetch(\"http://localhost:3678/cart/shopingCart\", {\n        method: 'POST',\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          password: JSON.parse(sessionStorage.getItem(\"currentuser\")).password\n        })\n      });\n      let pro = await prod.json();\n      setCart(pro);\n    }\n\n    async function showItems() {\n      itemCode = await props.product.CodeItem;\n\n      if (itemCode) {\n        AllItems = props.Allitems;\n        item = AllItems.filter(i => i.CodeItem == itemCode);\n        itemQ = item[0].QuantityItem;\n      }\n    } // getCart();\n\n\n    showItems();\n    checkStock();\n    return async () => {\n      if (JSON.parse(sessionStorage.getItem(\"currentuser\")).user_name != null) {\n        let up = await fetch('http://localhost:3678/cart/cartUpdate', {\n          method: 'PUT',\n          headers: {\n            'Accept': 'application/json',\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            user_name: JSON.parse(sessionStorage.getItem(\"currentuser\")).user_name,\n            password: JSON.parse(sessionStorage.getItem(\"currentuser\")).password,\n            cart: JSON.parse(sessionStorage.getItem(\"currentuser\")).cart\n          })\n        });\n        alert('updated details and exit');\n      }\n    };\n  }, []);\n\n  function checkStock() {\n    if (itemQ <= props.product.Quantity) {\n      setOutOfStock(true);\n    }\n\n    if (itemQ = 1) {\n      setBelowStock(true);\n    }\n  }\n\n  async function increaseQ() {\n    // itemCode = props.product.CodeItem;\n    // AllItems = props.Allitems;\n    // item = AllItems.filter(i => i.CodeItem == itemCode);\n    // itemQ = item[0].QuantityItem;\n    if (itemQ <= props.product.Quantity + 1) {\n      setOutOfStock(true);\n    } else {\n      let cartForChek = JSON.parse(sessionStorage.getItem(\"currentuser\")).cart;\n\n      for (let index = 0; index < cartForChek.length; index++) {\n        if (JSON.stringify(cartForChek[index].CodeItem) == itemCode) {\n          cartForChek[index].Quantity++;\n          itemname++;\n        }\n      }\n\n      setCart(cartForChek);\n      let newClient = JSON.parse(sessionStorage.getItem(\"currentuser\")).user_name;\n      let newPass = JSON.parse(sessionStorage.getItem(\"currentuser\")).password;\n      let newData = {\n        user_name: newClient,\n        password: newPass,\n        cart: cartForChek\n      };\n      window.sessionStorage.setItem(\"currentuser\", JSON.stringify(newData));\n    }\n  }\n\n  async function reduceQ() {\n    // itemCode = props.product.CodeItem;\n    // AllItems = props.Allitems;\n    // item = AllItems.filter(i => i.CodeItem == itemCode);\n    // itemQ = item[0].QuantityItem;\n    debugger; // let cartForChek = JSON.parse(sessionStorage.getItem(\"currentuser\")).cart;\n    // for (let index = 0; index < cartForChek.length; index++) {\n    //     if (JSON.stringify((cartForChek[index].CodeItem)) == itemCode) {\n    //         cartForChek[index].Quantity--;\n    //     }\n    // }\n    // setCart(cartForChek);\n    // let newClient = JSON.parse(sessionStorage.getItem(\"currentuser\")).user_name;\n    // let newPass = JSON.parse(sessionStorage.getItem(\"currentuser\")).password;\n    // let newData = { user_name: newClient, password: newPass, cart: cartForChek }\n    // window.sessionStorage.setItem(\"currentuser\", JSON.stringify(newData))\n  }\n\n  async function removeItem() {} // console.log(\"props\" + props);\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 9\n    }, this), props.product.ItemName, /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"quantity: \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: itemname\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      disabled: outOfStock,\n      onClick: () => {\n        increaseQ();\n      },\n      children: \"+\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      disabled: belowStock,\n      onClick: () => {\n        reduceQ();\n      },\n      children: \"-\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: removeItem,\n      children: \"remove\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 10\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 129,\n    columnNumber: 13\n  }, this);\n}\n\n_s(Client_Product_In_Cart, \"Ojp5YyuIKbtr1kB0y6PXyJq9VJM=\");\n\n_c = Client_Product_In_Cart;\n\nvar _c;\n\n$RefreshReg$(_c, \"Client_Product_In_Cart\");","map":{"version":3,"names":["React","useState","useEffect","useParams","useNavigate","useLocation","Routes","Route","Link","Outlet","Client_Product_In_Cart","props","cart","setCart","outOfStock","setOutOfStock","belowStock","setBelowStock","itemname","product","Quantity","itemCode","AllItems","item","itemQ","getCart","prod","fetch","method","headers","body","JSON","stringify","password","parse","sessionStorage","getItem","pro","json","showItems","CodeItem","Allitems","filter","i","QuantityItem","checkStock","user_name","up","alert","increaseQ","cartForChek","index","length","newClient","newPass","newData","window","setItem","reduceQ","removeItem","ItemName"],"sources":["F:/client-side/apartments/src/components/Client_Product_In_Cart.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { useParams } from 'react-router-dom';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { useLocation } from 'react-router-dom';\r\nimport { Routes, Route, Link, Outlet } from 'react-router-dom';\r\nexport default function Client_Product_In_Cart(props) {\r\n    const [cart, setCart] = useState([]);\r\n    const [outOfStock, setOutOfStock] = useState(false);\r\n    const [belowStock, setBelowStock] = useState(false);\r\n    let itemname = props.product.Quantity;\r\n    let itemCode;\r\n    let AllItems;\r\n    let item;\r\n    let itemQ;\r\n    useEffect(() => {\r\n        // sessionStorage.setItem(\"currentuser\",JSON.stringify({password:111,user_name:\"chani\",cart:{}}));\r\n        debugger;\r\n        async function getCart() {\r\n            let prod = await fetch(\"http://localhost:3678/cart/shopingCart\", {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Accept': 'application/json',\r\n                    'Content-Type': 'application/json'\r\n                },\r\n                body: JSON.stringify({ password: JSON.parse(sessionStorage.getItem(\"currentuser\")).password })\r\n            });\r\n            let pro = await prod.json();\r\n            setCart(pro);\r\n        }\r\n        async function showItems() {\r\n            itemCode = await props.product.CodeItem;\r\n            if (itemCode) {\r\n                AllItems = props.Allitems;\r\n                item = AllItems.filter(i => i.CodeItem == itemCode);\r\n                itemQ = item[0].QuantityItem;\r\n            }\r\n        }\r\n\r\n\r\n        // getCart();\r\n        showItems();\r\n        checkStock();\r\n       \r\n            return async () => {\r\n                if (JSON.parse(sessionStorage.getItem(\"currentuser\")).user_name != null) {\r\n                    let up = await fetch('http://localhost:3678/cart/cartUpdate', {\r\n                        method: 'PUT',\r\n                        headers: {\r\n                            'Accept': 'application/json',\r\n                            'Content-Type': 'application/json'\r\n                        },\r\n                        body: JSON.stringify({ user_name: JSON.parse(sessionStorage.getItem(\"currentuser\")).user_name, password: JSON.parse(sessionStorage.getItem(\"currentuser\")).password, cart: JSON.parse(sessionStorage.getItem(\"currentuser\")).cart })\r\n                    });\r\n                    alert('updated details and exit');\r\n                }\r\n\r\n            }\r\n        \r\n     \r\n    }, []);\r\n\r\n    function checkStock() {\r\n        if (itemQ <= props.product.Quantity) {\r\n            setOutOfStock(true);\r\n        }\r\n        if (itemQ = 1) {\r\n            setBelowStock(true);\r\n        }\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    async function increaseQ() {\r\n        // itemCode = props.product.CodeItem;\r\n        // AllItems = props.Allitems;\r\n        // item = AllItems.filter(i => i.CodeItem == itemCode);\r\n        // itemQ = item[0].QuantityItem;\r\n        if (itemQ <= props.product.Quantity + 1) {\r\n            setOutOfStock(true);\r\n        }\r\n        else {\r\n            let cartForChek = JSON.parse(sessionStorage.getItem(\"currentuser\")).cart;\r\n            for (let index = 0; index < cartForChek.length; index++) {\r\n                if (JSON.stringify((cartForChek[index].CodeItem)) == itemCode) {\r\n                    cartForChek[index].Quantity++;\r\n                    itemname++;\r\n                }\r\n            }\r\n            setCart(cartForChek);\r\n            let newClient = JSON.parse(sessionStorage.getItem(\"currentuser\")).user_name;\r\n            let newPass = JSON.parse(sessionStorage.getItem(\"currentuser\")).password;\r\n            let newData = { user_name: newClient, password: newPass, cart: cartForChek }\r\n            window.sessionStorage.setItem(\"currentuser\", JSON.stringify(newData))\r\n        }\r\n\r\n    }\r\n    async function reduceQ() {\r\n        // itemCode = props.product.CodeItem;\r\n        // AllItems = props.Allitems;\r\n        // item = AllItems.filter(i => i.CodeItem == itemCode);\r\n        // itemQ = item[0].QuantityItem;\r\n        debugger;\r\n\r\n        // let cartForChek = JSON.parse(sessionStorage.getItem(\"currentuser\")).cart;\r\n        // for (let index = 0; index < cartForChek.length; index++) {\r\n        //     if (JSON.stringify((cartForChek[index].CodeItem)) == itemCode) {\r\n        //         cartForChek[index].Quantity--;\r\n        //     }\r\n        // }\r\n        // setCart(cartForChek);\r\n        // let newClient = JSON.parse(sessionStorage.getItem(\"currentuser\")).user_name;\r\n        // let newPass = JSON.parse(sessionStorage.getItem(\"currentuser\")).password;\r\n        // let newData = { user_name: newClient, password: newPass, cart: cartForChek }\r\n        // window.sessionStorage.setItem(\"currentuser\", JSON.stringify(newData))\r\n\r\n\r\n    }\r\n\r\n    async function removeItem() {\r\n    }\r\n\r\n    // console.log(\"props\" + props);\r\n\r\n\r\n    return (<div>\r\n        <br></br>{props.product.ItemName}\r\n        <p>quantity: </p>\r\n        <p>{itemname}</p>\r\n        <button disabled={outOfStock} onClick={() => { increaseQ() }}>+</button>\r\n        <button disabled={belowStock} onClick={() => { reduceQ() }}>-</button>\r\n        {<button onClick={removeItem}>remove</button>}\r\n    </div>)\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}