{"ast":null,"code":"var _jsxFileName = \"F:\\\\client-side\\\\apartments\\\\src\\\\components\\\\Client_Shoping_Cart.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { useParams } from 'react-router-dom';\nimport { useNavigate } from 'react-router-dom';\nimport { useLocation } from 'react-router-dom';\nimport { Routes, Route, Link, Outlet } from 'react-router-dom';\nimport Client_Current_Product from \"./Client_Current_Product\";\nimport Client_Product_In_Cart from \"./Client_Product_In_Cart\";\nimport Client_Nav from \"./Client_Nav\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Client_Shoping_Cart(props) {\n  _s();\n\n  const [products, setProducts] = useState([{}]);\n  const [client, setClient] = useState(\"\");\n  const [quantity, setQuantity] = useState([]);\n  const [orderid, setOrderid] = useState([]);\n  let navigate = useNavigate();\n  let location = useLocation();\n  let Allitems = location.state.products;\n  setProducts();\n  console.log(Allitems);\n  useEffect(() => {\n    // async function getProducts() {\n    //     // let prod = await fetch(\"http://localhost:3678/shopingCart\", {\n    //     //     method: 'GET'\n    //     // });\n    //     let session = JSON.parse(sessionStorage.getItem(\"currentuser\")).password;\n    //     let prod = await fetch(\"http://localhost:3678/cart/shopingCart\", {\n    //         method: 'POST',\n    //         mode: 'cors',\n    //         headers: {\n    //             'Accept': 'application/json',\n    //             'Content-Type': 'application/json'\n    //         },\n    //         body: JSON.stringify({ password: session })\n    //         // body:JSON.stringify({\"password\":\"333\"}) \n    //     });\n    //     let pro = await prod.json();\n    //     setProducts(pro);\n    //     let quan = pro.map(p => p.Quantity);\n    //     setQuantity(quan);\n    //     let order_id = pro.map(p => p.OrderID);\n    // //     setOrderid(order_id)\n    // }\n    //..*\n    // async function getProducts() {\n    //     debugger;\n    //     let i = await fetch(\"http://localhost:3678/shopingCart\", {\n    //         method: 'GET'\n    //     });\n    //     let items = await i.json();\n    //     // items.map((item) =>\n    //     //     quantity = quantity + item.Quantity\n    //     // )\n    //     // let itemInC = await fetch(`http://localhost:3678/shopingCartItem/${items[0].CodeItem}`, {\n    //     //     method: 'GET'\n    //     // });\n    //     items.forEach(item => {\n    //         getPro(item.CodeItem)\n    //     })\n    //     // let allI=items.map((item)=>await fetch(`http://localhost:3678/shopingCartItem/${item.CodeItem}`, {\n    //     //     method: 'GET'\n    //     // }))\n    //     // setProducts(itemInCart);\n    //     items.map((item) =>\n    //         // quantity = quantity + item.Quantity\n    //         setQuantity(item.Quantity)\n    //     )\n    // }\n    // async function getPro(code) {\n    //     let itemInC = await fetch(`http://localhost:3678/shopingCartItem/${code}`, {\n    //         method: 'GET'\n    //     });\n    //     let item = await itemInC.json();\n    //     //להכניס מוצר לסטייט\n    //     // setProducts(products+item);\n    //     setProducts([...products, item]);\n    //     console.log(products);\n    // }\n    // setProducts(itemInCart);\n    // items.map((item) =>\n    //     // quantity = quantity + item.Quantity\n    //     setQuantity(item.Quantity)\n    // )*..\n    //  getProducts();\n    return async () => {\n      if (JSON.parse(sessionStorage.getItem(\"currentuser\")).user_name != null) {\n        let up = await fetch('http://localhost:3678/cart/cartUpdate', {\n          method: 'PUT',\n          headers: {\n            'Accept': 'application/json',\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            user_name: JSON.parse(sessionStorage.getItem(\"currentuser\")).user_name,\n            password: JSON.parse(sessionStorage.getItem(\"currentuser\")).password,\n            cart: JSON.parse(sessionStorage.getItem(\"currentuser\")).cart\n          })\n        });\n        alert('updated details and exit');\n      }\n    };\n  }, []); // let cart = JSON.parse(sessionStorage.getItem(\"currentuser\")).cart;\n  // let cartQ = cart.map(p => p.Quantity);\n\n  async function forPaying() {\n    navigate(\"/client/finalBill\", {\n      state: {\n        products: products,\n        quantity: quantity,\n        orderid: orderid\n      }\n    });\n  } // async function forPaying() {\n  //     navigate(\"/client/finalBill\", { state: { products: products, quantity: cartQ } });\n  // }\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Client_Nav, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 10\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"shoping cart\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 9\n    }, this), products.map((myproduct, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(Client_Product_In_Cart, {\n        product: myproduct,\n        Allitems: Allitems\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 13\n      }, this)\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 10\n    }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: forPaying,\n      children: \"to pay\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 136,\n    columnNumber: 13\n  }, this);\n}\n\n_s(Client_Shoping_Cart, \"Urx11UvjDA9NITu+hu4TgnFYIzg=\", false, function () {\n  return [useNavigate, useLocation];\n});\n\n_c = Client_Shoping_Cart;\n\nvar _c;\n\n$RefreshReg$(_c, \"Client_Shoping_Cart\");","map":{"version":3,"names":["React","useState","useEffect","useParams","useNavigate","useLocation","Routes","Route","Link","Outlet","Client_Current_Product","Client_Product_In_Cart","Client_Nav","Client_Shoping_Cart","props","products","setProducts","client","setClient","quantity","setQuantity","orderid","setOrderid","navigate","location","Allitems","state","console","log","JSON","parse","sessionStorage","getItem","user_name","up","fetch","method","headers","body","stringify","password","cart","alert","forPaying","map","myproduct","index"],"sources":["F:/client-side/apartments/src/components/Client_Shoping_Cart.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { useParams } from 'react-router-dom';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { useLocation } from 'react-router-dom';\r\nimport { Routes, Route, Link, Outlet } from 'react-router-dom';\r\nimport Client_Current_Product from \"./Client_Current_Product\";\r\nimport Client_Product_In_Cart from \"./Client_Product_In_Cart\";\r\nimport Client_Nav from \"./Client_Nav\";\r\n\r\nexport default function Client_Shoping_Cart(props) {\r\n    const [products, setProducts] = useState([{}]);\r\n    const [client, setClient] = useState(\"\");\r\n    const [quantity, setQuantity] = useState([]);\r\n    const [orderid, setOrderid] = useState([]);\r\n    let navigate = useNavigate();\r\n    let location = useLocation();\r\n    let Allitems = location.state.products;\r\n    setProducts()\r\n    console.log(Allitems);\r\n    useEffect(() => {\r\n\r\n        // async function getProducts() {\r\n        //     // let prod = await fetch(\"http://localhost:3678/shopingCart\", {\r\n        //     //     method: 'GET'\r\n        //     // });\r\n        //     let session = JSON.parse(sessionStorage.getItem(\"currentuser\")).password;\r\n        //     let prod = await fetch(\"http://localhost:3678/cart/shopingCart\", {\r\n        //         method: 'POST',\r\n        //         mode: 'cors',\r\n        //         headers: {\r\n        //             'Accept': 'application/json',\r\n        //             'Content-Type': 'application/json'\r\n        //         },\r\n        //         body: JSON.stringify({ password: session })\r\n\r\n        //         // body:JSON.stringify({\"password\":\"333\"}) \r\n        //     });\r\n        //     let pro = await prod.json();\r\n        //     setProducts(pro);\r\n        //     let quan = pro.map(p => p.Quantity);\r\n        //     setQuantity(quan);\r\n        //     let order_id = pro.map(p => p.OrderID);\r\n        // //     setOrderid(order_id)\r\n        // }\r\n\r\n\r\n\r\n\r\n\r\n\r\n//..*\r\n\r\n        // async function getProducts() {\r\n        //     debugger;\r\n        //     let i = await fetch(\"http://localhost:3678/shopingCart\", {\r\n        //         method: 'GET'\r\n        //     });\r\n        //     let items = await i.json();\r\n        //     // items.map((item) =>\r\n        //     //     quantity = quantity + item.Quantity\r\n        //     // )\r\n\r\n        //     // let itemInC = await fetch(`http://localhost:3678/shopingCartItem/${items[0].CodeItem}`, {\r\n        //     //     method: 'GET'\r\n        //     // });\r\n\r\n        //     items.forEach(item => {\r\n        //         getPro(item.CodeItem)\r\n        //     })\r\n\r\n        //     // let allI=items.map((item)=>await fetch(`http://localhost:3678/shopingCartItem/${item.CodeItem}`, {\r\n        //     //     method: 'GET'\r\n        //     // }))\r\n\r\n        //     // setProducts(itemInCart);\r\n        //     items.map((item) =>\r\n        //         // quantity = quantity + item.Quantity\r\n        //         setQuantity(item.Quantity)\r\n        //     )\r\n\r\n        // }\r\n        // async function getPro(code) {\r\n        //     let itemInC = await fetch(`http://localhost:3678/shopingCartItem/${code}`, {\r\n        //         method: 'GET'\r\n        //     });\r\n        //     let item = await itemInC.json();\r\n        //     //להכניס מוצר לסטייט\r\n        //     // setProducts(products+item);\r\n        //     setProducts([...products, item]);\r\n\r\n        //     console.log(products);\r\n        // }\r\n\r\n\r\n        // setProducts(itemInCart);\r\n        // items.map((item) =>\r\n        //     // quantity = quantity + item.Quantity\r\n        //     setQuantity(item.Quantity)\r\n        // )*..\r\n        //  getProducts();\r\n        return async () => {\r\n            if (JSON.parse(sessionStorage.getItem(\"currentuser\")).user_name != null) {\r\n                let up = await fetch('http://localhost:3678/cart/cartUpdate', {\r\n                    method: 'PUT',\r\n                    headers: {\r\n                        'Accept': 'application/json',\r\n                        'Content-Type': 'application/json'\r\n                    },\r\n                    body: JSON.stringify({\r\n                        user_name: JSON.parse(sessionStorage.getItem(\"currentuser\")).user_name,\r\n                        password: JSON.parse(sessionStorage.getItem(\"currentuser\")).password,\r\n                        cart: JSON.parse(sessionStorage.getItem(\"currentuser\")).cart\r\n                    })\r\n                });\r\n                alert('updated details and exit');\r\n            }\r\n\r\n        }\r\n\r\n       \r\n    }, []);\r\n\r\n    // let cart = JSON.parse(sessionStorage.getItem(\"currentuser\")).cart;\r\n    // let cartQ = cart.map(p => p.Quantity);\r\n\r\n    async function forPaying() {\r\n        navigate(\"/client/finalBill\", { state: { products: products, quantity: quantity, orderid: orderid } });\r\n    }\r\n    // async function forPaying() {\r\n    //     navigate(\"/client/finalBill\", { state: { products: products, quantity: cartQ } });\r\n    // }\r\n\r\n\r\n\r\n\r\n    return (<div>\r\n         <Client_Nav/>\r\n        <p>shoping cart</p>\r\n        {products.map((myproduct, index) =>\r\n        (<div key={index}>\r\n            <Client_Product_In_Cart product={myproduct} Allitems={Allitems} />\r\n        </div>)\r\n        )}\r\n\r\n        <button onClick={forPaying}>to pay</button>\r\n    </div>);\r\n\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}